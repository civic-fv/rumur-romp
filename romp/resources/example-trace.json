{
    "$type": "romp-trace",
    "$version": "0.0.1",
    "metadata": {}, // we can put details about the model here IDK
    "trace": [
        // ^^^ all of this needs to be output before you write any trace info ^^^
        // \/\/ all of this section will be output during the RW \/\/ (you will need to insert commas between objects)
        { // START of your part of the output
            "$type": "init",
            "startstate": // END of your part of the output
            {} // <- this would be the start state object that you get from the ::__caller__::STARSTATES array
            , // <- you would need to insert this
            "state": // <- you would need to insert this
            {} // <- this should be jsu the state object piped in
            // if this is the end of the object no comma
        }, // <- this brace & comma will need to be written manually by you every time
        { // START of your part of the output
            "$type": "rule-fail", // i.e. when a guard return false record it was tried
            "rule": // END of your part of the output
            {} // <- this would be the rule object that you get from the rand_ruleset -> rand_rule methods (locally called `r`) in the code
        },
        { // START of your part of the output
            "$type": "rule-applied", // i.e. when a guard return false record it was tried
            "rule": // END of your part of the output
            {}, // <- this would be the rule object that you get from the rand_ruleset -> rand_rule methods (locally called `r`) in the code
            "state": // <- you would need to insert this
            {} // <- this should be jsu the state object piped in
        },
        {} // this would repeat ...
    // when exception caught output from here to..
    ],
    "error-trace": [ // ... here
        {} // <- this would be the caught exception (plus more but it will be done automatically for you
    ], // after outputting exception output the rest ...
    "results": {}
}