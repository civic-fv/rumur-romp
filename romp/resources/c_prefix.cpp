/* this code was generated by Murphi2C */

// #include <assert.h>
// #include <stdbool.h>
#include <cstddef>
// #include <stdio.h>
// #include <stdlib.h>
#include <string>
#include <strstream>
#include <exception>
#include <vector>
#include <memory>



// << =============================== Preprocessor Declarations ================================ >>

#ifndef __romp__GENERATED_CODE
#include "romp-rw_pregen-fix.hpp" // FOR PRE-CODEGEN LANGUAGE SUPPORT ONLY !! 
#endif


// various printf wrappers to deal with the user having passed --value-type
// static __attribute__((unused)) void print_int     (int v)      { printf("%d",          v); }
// static __attribute__((unused)) void print_unsigned(unsigned v) { printf("%u",          v); }
// static __attribute__((unused)) void print_short   (short v)    { printf("%hd",         v); }
// static __attribute__((unused)) void print_long    (long v)     { printf("%ld",         v); }
// static __attribute__((unused)) void print_int8_t  (int8_t v)   { printf("%" PRId8 , v); }
// static __attribute__((unused)) void print_uint8_t (uint8_t v)  { printf("%" PRIu8 , v); }
// static __attribute__((unused)) void print_int16_t (int16_t v)  { printf("%" PRId16, v); }
// static __attribute__((unused)) void print_uint16_t(uint16_t v) { printf("%" PRIu16, v); }
// static __attribute__((unused)) void print_int32_t (int32_t v)  { printf("%" PRId32, v); }
// static __attribute__((unused)) void print_uint32_t(uint32_t v) { printf("%" PRIu32, v); }
// static __attribute__((unused)) void print_int64_t (int64_t v)  { printf("%" PRId64, v); }
// static __attribute__((unused)) void print_uint64_t(uint64_t v) { printf("%" PRIu64, v); }

// wrappers for producing literal expressions of value type
#define int_VALUE_C(v)      (v)
#define unsigned_VALUE_C(v) (v ## u)
#define short_VALUE_C(v)    ((short)(v))
#define long_VALUE_C(v)     (v ## l)
#define int8_t_VALUE_C(v)   INT8_C(v)
#define uint8_t_VALUE_C(v)  UINT8_C(v)
#define int16_t_VALUE_C(v)  INT16_C(v)
#define uint16_t_VALUE_C(v) UINT16_C(v)
#define int32_t_VALUE_C(v)  INT32_C(v)
#define uint32_t_VALUE_C(v) UINT32_C(v)
#define int64_t_VALUE_C(v)  INT64_C(v)
#define uint64_t_VALUE_C(v) UINT64_C(v)


namespace romp {

  typedef _ROMP_STATE_TYPE State_t;

  struct file_position {
    size_t row;
    size_t col;
  };
  std::ostream& operator << (std::ostream& out, const file_position& fp) { return (out << fp.row << ',' << fp.col); }

  struct location {
    std::string model_obj;
    file_position start;
    file_position stop;
  };
  std::ostream& operator << (std::ostream& out, const location& loc) { 
    out << ((__model__filename_contains_space) ? "\""__model__filename "\":" : __model__filename ":") 
        << loc.start << '-' << loc.stop;
    if (loc.model_obj != "")
      out << " in \"" << loc.model_obj << "\"";
    return out; 
  }

  struct ModelException : public std::nested_exception {
    const location loc;
    const std::string msg;
    ModelException(const std::string msg_, const location loc_) : std::nested_exception(), msg(msg_), loc(loc_) {}
    const char* what() const noexcept {
      std::strstream out;
      this->what(out);
      return out.str();
    }
    virtual void what(std::ostream& out) const noexcept {
      out << loc << " :: " << msg;
    }
  };

  struct ModelException_Test : public ModelException {
    const std::string test_str;
    ModelException_Test(const std::string test_str_, const std::string msg_, const location loc_)
      : ModelException(msg_,loc_), test_str(test_str_) {}
    void what(std::ostream& out) const noexcept {
      out << loc << " :: " << msg << "\t:: expression = ``" << test_str << "``";
    } 
  };
 
  #define __romp__nested_exception__print_prefix "| "

  void fprint_exception(std::ostream& out, const ModelException& ex, const std::string& prefix) noexcept;
  void fprint_exception(std::ostream& out, const std::exception& ex, const std::string& prefix) noexcept;

  void fprint_exception(std::ostream& out, const ModelException& ex, const std::string& prefix) noexcept {
    out << prefix;
    ex.what(out);
    out << '\n';
    try {
        std::rethrow_if_nested(ex);
    } catch(const ModelException& mod_ex) {
      fprint_exception(out, mod_ex, prefix + __romp__nested_exception__print_prefix);
    } catch(const std::exception& ex) {
      fprint_exception(out, ex, prefix + __romp__nested_exception__print_prefix);
    } catch(...) {}
  }

  void fprint_exception(std::ostream& out, const std::exception& ex, const std::string& prefix) noexcept {
    out << prefix << ex.what() << '\n';
    try {
        std::rethrow_if_nested(ex);
    } catch(const ModelException& mod_ex) {
      fprint_exception(out, mod_ex, prefix + __romp__nested_exception__print_prefix);
    } catch(const std::exception& ex) {
      fprint_exception(out, ex, prefix + __romp__nested_exception__print_prefix);
    } catch(...) {}
  }

  std::ostream& operator << (std::ostream& out, const ModelException& ex) {
    fprint_exception(out, ex, "");
    return out;
  }

  std::ostream& operator << (std::ostream& out, const std::exception& ex) {
    fprint_exception(out, ex, "");
    return out;
  }

  struct RuleSet;

  struct Rule {
    bool (*guard)(const State_t&) throw (ModelException);
    void (*action)(State_t&) throw (ModelException);
    const char* params_json;
  };

  struct RuleSet {
    std::string name;
    location loc;
    std::vector<Rule> rules;
  }; 

  struct Invariant_info {
    id_t id;
    id_t ruleset_id;
    location& loc;
    std::string expression;
  };

  struct Invariant {
    bool (*check)(const State_t&) throw (ModelException);
  };

  struct StartState {
    void (*initialize)(State_t&) throw (ModelException);
    id_t id;
    id_t ruleset_id;
    location& loc;
  };

  // static void failed_assertion_(const char *message) {
  //   fprintf(stderr, "failed assertion: %s\n", message);
  //   exit(EXIT_FAILURE);
  // }

  // void (*failed_assertion)(const char *) = failed_assertion_;

  // static void failed_assumption_(const char *message) {
  //   fprintf(stderr, "failed assumption: %s\n", message);
  //   exit(EXIT_FAILURE);
  // }

  // void (*failed_assumption)(const char *) = failed_assumption_;

  // static void error_(const char *message) {
  //   fprintf(stderr, "error: %s\n", message);
  //   exit(EXIT_FAILURE);
  // }

  // void (*error)(const char *) throw (ModelException) = error_;

  // static void cover_(const char *message __attribute__((unused))) {}

  // void (*cover)(const char *) throw (ModelException) = cover_;

  // static void liveness_(const char *message __attribute__((unused))) {}

  // void (*liveness)(const char *) throw (ModelException) = liveness_;

}

namespace __type__ {
  typedef bool boolean; // builtin type mask for Murphi's boolean
}
